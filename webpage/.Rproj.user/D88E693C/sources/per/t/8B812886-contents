
# get libraries & call data --------------------------------------------


source(file = here::here("R_scripts/clean_and_wrangling.R"), local = TRUE)$value



# Header ------------------------------------------------------------------
header <- dashboardHeader(title = "HYROX",
                          
                          # User menu
                          dropdownMenu(
                            type = "notifications", 
                            headerText = 
                              span(h4("JoÃ£o Neto", style = "font-size: bold, padding-bottom:0px"), 
                                   br(), 
                                   bs_icon("chat-fill"), " I am a HYROX races enthusiast. Visit my LinkedIn and know me better."), 
                            icon = icon("user"), 
                            badgeStatus = NULL,
                            notificationItem(
                              icon = icon("linkedin"),
                              text = ("Linkedin"),
                              href = "https://www.linkedin.com/in/joaonetoprofile/"
                            )
                          ),
                          
                          
                          dropdownMenu(
                            type = "notifications",
                            headerText = 
                              span(
                                h4("HYROX is a fitness racing", style = "border-bottom: 1px solid black; font-weight: bold"),
                                p(em('"HYROX combines both running and functional 
                                      workout stations, where participants run 1km, 
                                      followed by 1 functional workout station, 
                                      repeated eight times"'), " (source: https://hyrox.com/the-fitness-race/).", style = "text-align: justify"),
                                br(),
                                p("For each 1 km of running completed, athletes have a workout station to finish 
                                     until they complete a total of 8 km of running and 8 different workout stations.", style = "text-align: justify"),
                                br(),
                                p("It is a global competition; at the end of each race season, 
                                    the top 15 athletes compete against each other. In 2023, 
                                    the world champion race was in Manchester (UK). 
                                    This app is an analysis of that race.", style = "text-align: justify")
                              ),
                            
                            icon = strong(bs_icon("info-circle-fill"), "About APP"),
                            badgeStatus = NULL,
                            notificationItem(
                              icon = icon("running"),
                              text = ("Official HYROX Website"),
                              href = "https://hyrox.com/"
                            )
                            
                          )
                        )





# SideBar ---------------------------------------------------------------
sidebar <- dashboardSidebar(
  
  sidebarMenu(id = "tabs",
              
              menuItem(span(bs_icon("zoom-in")," Race Results"), tabName = "race"),
              # menuItem("Race Results", tabName = "race", icon = icon("binoculars", lib = "font-awesome")),
              menuItem("Demographic", tabName = "demographic", icon = icon("globe", lib="glyphicon")),
              menuItem(span(bs_icon("bar-chart-fill"), " Individual Analysis"), tabName = "analysis"),
              # menuItem("Individual Analysis", tabName = "analysis", icon = icon("chart-line", lib = "font-awesome")),
              
              conditionalPanel("input.tabs == 'analysis'",
                               div(id = "my_submenu", style = "background-color: #262626; padding: 5px 5px 10px 5px; border-right: 1px solid black",
                                   selectInput(
                                     inputId = "select_athlete_list",
                                     label = "Athlete:",
                                     choices = select_athlete
                                   ),
                                   selectInput(
                                     inputId = "select_station_list",
                                     label ="Station:",
                                     choices = select_station,
                                   ),
                                   
                                   h5("Visual Statistics Race Times", 
                                      style = "text-align: left; margin: 15% 0px 3px 8%; color: grey"),
                                   div(style = "margin: 0% 5% 10% 5%; padding: 0px 0px; 
                                                  background-color: #404040; border-radius: 10px;
                                         
                                                  box-shadow: inset 0px 0px 4px 0px rgba(0, 0, 0, 0.55), 
                                                              inset 0px 0px 7px 0px rgba(0, 0, 0, 0.85);",
                                       
                                       
                                       span(id = "span_mean",
                                            materialSwitch(inputId = "switch_mean",
                                                           label = "Mean", 
                                                           status = "success",
                                                           right = FALSE,
                                                           value = FALSE,
                                                           inline = TRUE, 
                                                           width = "57px"),
                                            textOutput(outputId = "station_mean_value", inline = TRUE)
                                       ),
                                       
                                       br(style = "margin: 0px; padding: 0px"),
                                       span(id = "span_median",
                                            materialSwitch(inputId = "switch_median",
                                                           label = "Median",
                                                           status = "danger",
                                                           right = FALSE,
                                                           value = FALSE,
                                                           inline = TRUE,
                                                           width = "57px"),
                                            textOutput(outputId = "station_median_value", inline = TRUE)
                                       )
                                   )
                               )
              )
  )
)







# Body --------------------------------------------------------------------
body <-  dashboardBody(

# call css scripts --------------------------------------------------------
  source(here::here("R_scripts/css_scripts.R")), 
  
  # use_theme(my),
  tags$head(
    tags$style(HTML("
                      
      
      
       .my_infobox {positive: relative; display: block;
                    float:left; 
                    color: white; 
                    width: 30%;
                    height: 70px;
                    # text-align: center;
                    margin: 0px 0px 0px 30px; 
                    padding: 0px 0px 0px 0px;
                    box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px; 
       }
       
       .my_infobox_aside {positive: relative; display: block;
                          float: left;
                          width: 30%;
                          height: 100%; 
                          background-color: black; 
                          margin: 0px 0px 0px 0px; 
                          padding: 0px 0px 0px 0px; 
       }
       
       .my_infobox_aside_icon {positive: relative;display: block;color: white; font-size: 40px; position:relative; top: 20%; left: 20%}
       .my_infobox_body {positive: relative;display: block;
                         float: left; 
                         width: 70%;
                         height: 100%;
                         text-align: left;
                         padding: 0px 0px 0px 10px; 
                         background-color: black;
                        }
      .my_infobox_body_title {positive: relative;display: block;margin: 0px; padding: 0px 0px 0px 0px ; letter-spacing: 2px; position:relative; top: 25%}

       
      
      .my_plot_demographic {float:left; margin: 0px; padding 0px 0px 0px 0px;  }
      
      #tabbox_demographic {padding: 0px; width: 100%; border: 0px;}
      
      


      
     
      /* Tab-Box */
      
      # .col-sm-6 {width: 100%; height: 100%; padding: 0px; margin: 0px}
      # 
      # .nav-tabs-custom {margin: 0px; padding: 0px; border: 0px; }
      # .nav-tabs-custom>.nav-tabs {
      #                             background-color: black;
      #                             margin: 0px;
      #                             padding: 0px;
      #                             border-radius: 0px;
      #                             border: 0px;
      #                         }
      # 
      # .nav-tabs-custom>.nav-tabs>li {
      #                                width: 50%;
      #                                text-align: center;
      #                                background-color: black;
      #                                color: white;
      #                                border-top-color: black;
      #                                border-top-width: 3px;
      #                                padding: 0px;
      #                                margin: 0px;
      #                                border-radius: 0px;
      #                               }
      # 
      # .nav-tabs-custom>.nav-tabs>li.active {
      #                                       border-top-color: #FFED00;
      #                                       border-top-width: 3px;
      #                                      }
      # 
      # .nav-tabs-custom>.nav-tabs>li>a        {background-color: #1A1A1A; color: #FFFFFE; padding: 10px; border: 0px; font-size: 16px}
      # .nav-tabs-custom>.nav-tabs>li.active>a {background-color: black; color: #FFFFFE; border: 0px; }
      # 
      # .nav-tabs-custom>.tab-content {padding: 0px; border 0px; margin: 0px; width: 100%;}

      
      
      
      
      #DELETE navbar icons selected
      #DELETE.navbar-custom-menu .navbar-nav li:hover{background-color: #A69000}
      
      #DELETE navbar icons pressed/clicked
      #DELETE.navbar-custom-menu .navbar-nav li:active {background-color: grey;}
      

   

      

      
      
      #athlete_name {color: #FFED00; padding: 0px; margin: 0px}

     
       #DELETE .col-sm-4 {padding:0px 25px 0px 0px; margin:0px 0px 0px 0px}
       #DELETE .info-box {box-shadow: rgba(0, 0, 0, 0.90) 0px 4px 8px; margin: 20px 0px 0px 0px; padding:0px; }
       #DELETE .info-box-icon {font-size: 50px; text-align: center; }
       #DELETE .info-box-text {font-size: 24px; color: red; padding-top: 7px; margin: 0px; text-transform: capitalize}
       #DELETE .info-box-result {font-size: 16px; padding-top: 15px; margin: 0px; }


#analysis_main_page th {
                        background-color: black;
                        # border: none;
                        # border-top: 3px solid grey;
                        # border-bottom: 3px solid grey;
                        text-align: center;
                        height: 0px;
                        padding: 10px 0px;
}


    #race_page th {
                   background-color: #202020;
                   border: none;
                   text-align: center;
                   height: 0px;
                   padding: 3px 0px;
                   color: white;
                   border-bottom: 3px solid #FFFFFE;
                   font-size: 16px
                  }


#race_page table.dataTable.no-footer {
    border-bottom: 3px solid #FFFFFE;
}

#analysis_main_page table.dataTable.no-footer {
    border-bottom: 0px;
}

#DataTables_Table_1_paginate {
                              background-color: #202020;
                              width: 100%;
                              padding: 5px 0px 5px 0px;
                              text-align: center;
                             }

#DataTables_Table_0_paginate {
                              background-color: #202020;
                              width: 100%;
                              padding: 5px 0px 5px 0px;
                              text-align: center;                  
                             }

.paginate_button {
                  background: #FFFFFE; 
                  font-size: 12px
                 }


#analysis_main_page tr td:nth-child(5) {
      border-radius: 50%; 
}

#analysis_main_page tr td:nth-child(1) {
      border-top-left-radius: 60px; 
      border-bottom-left-radius: 60px; 
}

#analysis_main_page tr td:nth-child(4) {
      border-top-right-radius: 60px; 
      border-bottom-right-radius: 60px;
}

#analysis_main_page th:nth-child(1) {
      border-top-left-radius: 60px; 
      border-bottom-left-radius: 60px;
}
#analysis_main_page th:nth-last-child(1) {
      border-top-right-radius: 60px; 
      border-bottom-right-radius: 60px;
}


#table_classification th:nth-child(6) {background-color: #202020; color: white; }
#table_classification th:nth-child(7) {background-color: #202020; color: white; }




#table_classification td {
                          color: white; 
                          padding: 0px 1px 0px 5px; 
                          border-bottom: 0.3px solid white; 
                          font-size: 18px;
                         }

#athlete_name {margin:0px; padding: 0px;}


#station_mean_value { 
                      color: #00A65A; 
                      font-weight: normal; 
                      font-size: 18px; 
                      margin: 0px; 
                      padding: 0px; 
}

#station_median_value { 
                      color: #DD4B39; 
                      font-weight: normal; 
                      font-size: 18px; 
                      margin: 0px; 
                      padding: 0px; 
}



#table_stats th:nth-child(1) {text-align: center; vertical-align: bottom;}
#table_stats th:nth-child(2) {text-align: center; vertical-align: bottom;}
#table_stats th:nth-child(3) {text-align: center; vertical-align: bottom;}
#table_stats th:nth-child(4) {text-align: center; vertical-align: bottom;}
#table_stats th:nth-child(5) {text-align: center; vertical-align: bottom;}
#table_stats th:nth-child(6) {text-align: center; vertical-align: bottom;}
#table_stats th:nth-child(7) {text-align: center; vertical-align: bottom;}

##table_stats tr td {border-bottom: 1px solid yellow; color: red}


.form-group.shiny-input-container.shiny-input-container-inline {
    margin: 5px 0px 5px 0px; padding: 5px 0px 5px 18px;
}




      "
    ))
  ),




## Pages -------------------------------------------------------------------
tabItems(
  
  ## Race Page ---------------------------------------------------------------
  tabItem(
    
    tabName = "race",
    
      column(width = 7,
             h3(icon("medal", lib = "font-awesome"), "  Results & Rankings", style = "background-color: #FFED00; color: #202020; margin: 0px; padding: 10px 0px 10px 20px; width: 100%"),
             tableOutput(outputId = "table_classification")
             
             ),
    
    column(width = 5,
      fluidRow(
        h3(bs_icon("speedometer"), "  Faster Atlhete By Station", style = "background-color: #FFED00; color: #202020; margin: 0px; padding: 10px 0px 10px 20px;  width: 100%"),
        dataTableOutput(outputId = "table_faster", width = "auto"),
        
      ),
      br(),
      fluidRow(
        h3(bs_icon("calculator"), "  Statistics By Station", style = "background-color: #FFED00; color: #202020; margin: 0px; padding: 10px 0px 10px 20px; width: 100%"),
        dataTableOutput(outputId = "table_stats", width = "auto")
      )
    )
          
          # div(id = "race_page", 
          #     style = "margin-left: 1%;",
          #     div(class = "col_race",
          #         style = "float: left; width: 61%; box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 0.9)",
          #         h3(icon("medal", lib = "font-awesome"), "  Results & Rankings", style = "background-color: #FFED00; color: #202020; margin: 0px; padding: 10px 0px 10px 20px; width: 100%"),
          #         tableOutput(outputId = "table_classification")
          #     ),
          #     div(class = "col_race",
          #         style = "float: left; width: 35%; margin-left: 3%; ",
          #         div(style = "box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 1)",
          #             h3(bs_icon("speedometer"), "  Faster Atlhete By Station", style = "background-color: #FFED00; color: #202020; margin: 0px; padding: 10px 0px 10px 20px;  width: 100%"),
          #             dataTableOutput(outputId = "table_faster", width = "auto"),
          #         ),
          #         div(style = "margin-top: 30px; box-shadow: 0px 0px 12px 0px rgba(0, 0, 0, 1)",
          #             h3(bs_icon("calculator"), "  Statistics By Station", style = "background-color: #FFED00; color: #202020; margin: 0px; padding: 10px 0px 10px 20px; width: 100%"),
          #             dataTableOutput(outputId = "table_stats", width = "auto")
          #         )
          #     )
          # )
  ),
  
  ## Demographic -------------------------------------------------------------
  tabItem(tabName = "demographic",
        
        fluidRow(
          column(width = 4,
                 tabBox(
                   # id = "tabbox_demographic", 
                        tabPanel(title = "Visualisation",
                                 card(full_screen = TRUE,
                                      card_body(plotOutput("plot_demographic_continents"))
                                 )
                        ),
                        tabPanel(title = "Data",
                                 dataTableOutput(outputId = "data_continents", width = "auto")
                        ),
                 )
                 
          ),
          column(width = 4,
                 tabBox(
                   
                   tabPanel(
                     title = "Visualisation",
                     card(full_screen = TRUE,
                                 card_body(plotOutput("plot_demographic_countries")))),
                   
                   tabPanel(
                     title = "Data",
                     dataTableOutput(outputId = "data_countries", width = "auto")),
                 
                   )
                 ),
          
          column(width = 4,
                 tabBox(
                        tabPanel(title = "Visualisation",
                                 card(full_screen = TRUE,
                                      card_body(plotOutput("plot_demographic_age_groups"))
                                 )
                        ),
                        tabPanel(title = "Data",
                                 dataTableOutput(outputId = "data_age_group", width = "auto")),
                 )
                 
          )
          
        )
  ),
        
        
  #                  div(class = "my_infobox",
  #                      div(class = "my_infobox_aside",
  #                          icon(class ="my_infobox_aside_icon", "globe", lib = "font-awesome")
  #                      ),
  #                      div(class = "my_infobox_body",
  #                          h2(class = "my_infobox_body_title",
  #                             str_c(info_demographic_continents, " Continents"))
  #                      )
  #                  ),
  #                  
  #                  div(class = "my_infobox",
  #                      div(class = "my_infobox_aside",
  #                          icon(class ="my_infobox_aside_icon", "map", lib = "font-awesome")
  #                      ),
  #                      div(class = "my_infobox_body",
  #                          h2(class = "my_infobox_body_title", 
  #                             str_c(info_demographic_countries, " Countries"))
  #                      )
  #                  ),
  #                  
  #                  div(class = "my_infobox",
  #                      div(class = "my_infobox_aside",
  #                          icon(class ="my_infobox_aside_icon", "group", lib = "font-awesome")
  #                      ),
  #                      div(class = "my_infobox_body",
  #                          h2(class = "my_infobox_body_title", 
  #                             str_c(info_demographic_age_group, " Age Group")),
  #                      )
  #                  ),
  #         
  #         fluidRow(style = "margin: 0px -40px 0px -10px;",
  #                  
  #                  div(class = "my_plot_demographic",
  #                      style = "background-color: #262626; 
  #                                 margin: 0px 0px 0px 30px;
  #                                 padding: 0px;
  #                                 box-shadow: rgba(0, 0, 0, 0.85) 0px 5px 15px; 
  #                                 width: 30%;",
  #                      tabBox(id = "tabbox_demographic", 
  #                             tabPanel(title = "Visualisation",
  #                                      card(full_screen = TRUE,
  #                                           card_body(plotOutput("plot_demographic_continents"))
  #                                      )
  #                             ),
  #                             tabPanel(title = "Data",
  #                                      dataTableOutput(outputId = "data_continents", width = "auto")
  #                             ),
  #                      )
  #                  ),
  #                  
  #                  div(class = "my_plot_demographic",
  #                      style = "background-color: #262626; 
  #                                 margin: 0px 0px 0px 30px;
  #                                 padding: 0px;
  #                                 box-shadow: rgba(0, 0, 0, 0.85) 0px 5px 15px; 
  #                                 width: 30%",
  #                      tabBox(id = "tabbox_demographic", 
  #                             tabPanel(title = "Visualisation",
  #                                      card(full_screen = TRUE,
  #                                           card_body(plotOutput("plot_demographic_countries"))
  #                                      )
  #                             ),
  #                             tabPanel(title = "Data",
  #                                      dataTableOutput(outputId = "data_countries", width = "auto")),
  #                      )
  #                  ),
  #                  
  #                  div(class = "my_plot_demographic",
  #                      style = "background-color: #262626; 
  #                                 margin: 0px 0px 0px 30px;
  #                                 padding: 0px;
  #                                 box-shadow: rgba(0, 0, 0, 0.85) 0px 5px 15px; 
  #                                 width: 30%",
  #                      tabBox(id = "tabbox_demographic", 
  #                             tabPanel(title = "Visualisation",
  #                                      card(full_screen = TRUE,
  #                                           card_body(plotOutput("plot_demographic_age_groups"))
  #                                      )
  #                             ),
  #                             tabPanel(title = "Data",
  #                                      dataTableOutput(outputId = "data_age_group", width = "auto")),
  #                      )
  #                  )
  #         )
  # ),
  
  ## Analysis ----------------------------------------------------------------
  tabItem(
    
    tabName = "analysis",
          
          div(id = "analysis_main_page", style = "margin: 0px 0px 0px 30px;",
              
              div(class = "athlete_name_row", style = "margin:0px; padding: 0px;",
                  h1(textOutput(outputId = "athlete_name"))
              ),
              
              #///////////////////////////////////////////////////////////////
              
              fluidRow(
                infoBoxOutput("athlete_overall_performance", width = 4),   
                infoBoxOutput("athlete_age_group_info", width = 4),
                infoBoxOutput("nationality", width = 4),
              ),
              # div(id = "infoboxs_row",
              #     
              #     infoBoxOutput("athlete_overall_performance", width = 4),   
              #     infoBoxOutput("athlete_age_group_info", width = 4),
              #     infoBoxOutput("nationality", width = 4),
              # ),
              
              #///////////////////////////////////////////////////////////////
              
              fluidRow(
                column(width = 4,
                       dataTableOutput(outputId = "tb_athelte_stations", width = "auto")
                ),
                
                column(width = 8,
                       plotOutput("plot_run_analysis", height = "480px", width = "auto" )
                )
              )
              
              
              # div(style = "margin-top: 0px; ", 
              #     div(class = "analyis_col_plot", 
              #         style = "float: left; width: 35%; margin-top: 30px",
              #         
              #         dataTableOutput(outputId = "tb_athelte_stations", width = "auto")
              #     )
              # ),
              # div(class= "analyis_col_table",
              #     style = "float: left; width: 61%; margin-top: 30px; margin-left: 20px;",
              #     
              #     plotOutput("plot_run_analysis", height = "480px", width = "auto" )
              # )
          )
          
  )
)
)





# ui - Define the ui ------------------------------------------------------
ui <- dashboardPage(
  header  = header, 
  sidebar = sidebar, 
  body    = body
)


# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  plot_dempgraphic_theme <- reactive({
    theme_minimal() +
      theme(
        panel.grid = element_blank(),
        legend.position = "none",
        plot.title = element_text(color = "#FFED00", face = "bold", vjust = 0),
        plot.background = element_rect(fill = "#262626", colour = "#262626"),
        axis.text.x = element_text(color = "#FFFFFE", size = 12),
        axis.text.y = element_blank(),
        axis.ticks.x = element_line(size = 0.6, color = "#FFED00"),
        axis.ticks.length.x = unit(0.15, "cm")
      )
  })
  
  
  table_template <- reactive({
    
    options = list(
      autoWidth = FALSE,    #smart width handling
      searching = FALSE,    #search box above table
      ordering = FALSE,      #whether columns can be sorted
      lengthChange = FALSE, #ability to change number rows shown on page in table
      lengthMenu = FALSE,   #options lengthChange can be changed to
      pageLength = FALSE,   #initial number of rows per page of table
      paging = FALSE,       #whether to do pagination
      info = FALSE          #notes whether or not table is filtered
    )
    
  })
  
  # outputs -----------------------------------------------------------------
  
  # Race --------------------------------------------------------------------
  
  output$table_classification <- function() ({
    
    join_diff_run <- hyrox_ellite_men_tidy %>% 
      filter(station == "Run Total") %>%
      mutate(diff_run = str_c(diff)) %>% 
      mutate(diff_run = case_when(diff_run == "-" ~ "-",
                                  TRUE ~ paste(as.character(icon("caret-up", lib = "font-awesome", style = "color: red; font-size: 24px;" )), diff_run))) %>% 
      mutate(diff_run = diff_run) %>% 
      select(name, diff_run)
    
    
    
    join_diff_total <- hyrox_ellite_men %>% 
      select(name, total_race) %>% 
      mutate(total_duration = as.duration(hms(total_race))) %>% 
      mutate(total_duration = if_else(is.na(total_duration), as.duration(ms(total_race)), total_duration)) %>% 
      mutate(diff_prev = str_c("+", as.period(total_duration - lag(total_duration, 1))),
             diff_winner = str_c("+", as.period(total_duration - total_duration[1]))) %>% 
      mutate(diff = str_c(diff_prev, "<br></br>", diff_winner)) %>% 
      mutate(diff = replace_na(diff, "-"))
    
    
    X <- hyrox_ellite_men %>%
      left_join(., join_diff_total) %>% 
      mutate(rank = rank_function(rank),
             rank_run = rank_function(rank_run)) %>%
      mutate(space_one = "  ", space_two = "  ") %>% 
      select(name, rank, total_race, diff, space_one, age_group, rank_ag, space_two, rank_run, total_run, pace_run) %>%
      knitr::kable(format = "html", escape = FALSE, 
                   col.names = c("Athlete", 
                                 as.character(span(icon("medal", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("Rank", style = "margin:0px; padding: 0px"))),
                                 as.character(span(icon("clock", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("Time", style = "margin:0px; padding: 0px"))),
                                 paste(h6("(1)", style = "color: grey; font-size: 13px; margin: 0px; padding: 0px; text-align: right; width: 20px"),
                                       as.character(icon("chart-line", lib = "font-awesome", style = "color: white; font-size: 20px"))),
                                 
                                 as.character(h3(" ", style ="margin-left: 20px")),
                                 as.character(span(icon("group", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("AG", style = "margin:0px; padding: 0px"))),
                                 as.character(span(icon("medal", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("Rank", style = "margin:0px; padding: 0px"))),
                                 as.character(h3(" ", style ="margin-left: 20px")),
                                 as.character(span(icon("medal", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("Rank", style = "margin:0px; padding: 0px"))),
                                 as.character(span(icon("clock", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("Time", style = "margin:0px; padding: 0px"))),
                                 as.character(span(icon("heartbeat", lib = "font-awesome", style = "color: white; font-size: 20px"),
                                                   br(), h6("Pace", style = "margin:0px; padding: 0px")))
                   )) %>%
      kable_styling(bootstrap_options = "basic",
                    full_width = TRUE,
                    position = "center") %>%
      add_header_above(
        escape = FALSE, 
        line = TRUE, 
        line_sep = 5,
        header = c(" " = 1,
                   "Overall Performance" = 3,
                   " " = 1,
                   "Age Group (AG)" = 2,
                   " " = 1,
                   "8km Run Performance" = 3),
        extra_css = "color: white ; text-align: center; font-size: 16px; font-size: normal; ") %>%
      row_spec(row = 0, align = "center", extra_css = "padding: 5px 0px") %>%
      column_spec(1, background = "#323232", extra_css = "text-align: left; font-size: 18px; vertical-align: middle;") %>%
      column_spec(2:11, extra_css = "text-align: center; font-size: 18px; vertical-align: middle;") %>% 
      column_spec(4, extra_css = "font-size: 14px; background-color: firebrick; color: white") %>% 
      add_footnote(label = c("First row time / Second row time: Difference for the above athlete / Difference for the Race Winner."),
                   notation = "number", escape = FALSE)
  })
  
  
  output$table_faster <- DT::renderDataTable({
    faster_atlhete <- hyrox_ellite_men_tidy %>% 
      
      filter(rank_station == 1,
             !str_detect(station, "Run Total")) %>%
      select(station, name, time)
    
    faster_atlhete %>% 
      datatable(
        options = list(
          lengthChange = FALSE, 
          lengthMenu = list(c(8)),
          pageLength = c(8),
          autoWidth = FALSE,    
          searching = FALSE,    
          ordering = FALSE,      
          paging = TRUE,       
          info = FALSE 
        ) ,
        rownames = FALSE,
        escape = FALSE,
        colnames = c("Station", 
                     "Athlete",
                     as.character(icon("clock", lib = "font-awesome", style = "color: white; font-size: 20px"))
        )) %>% 
      formatStyle(
        columns = c(1:3),
        backgroundColor = "#262626",
        color = "#FFFFFE",
        textAlign = "center",
        verticalAlign = "middle",
        paddingBottom = "1px",
        paddingTop = "1px",
        fontSize   = "16px"
      ) %>% 
      formatStyle(
        columns = c(1),
        backgroundColor = "#323232")
    
  })
  
  output$table_stats <- DT::renderDataTable({
    my_stats <- station_statistics %>% 
      # filter(!str_detect(station, "Run Total")) %>% 
      mutate(diff_mean = mean_time - lag(mean_time, 1),
             diff_mean = if_else(str_detect(station, "[2-8]"),
                                 true =  
                                   case_when(
                                     diff_mean > 0 ~ paste0(as.character(icon("caret-up", lib = "font-awesome", style = "color: red; font-size: 20px; padding:0px; margin:0px;" )), abs(diff_mean)),
                                     TRUE ~ paste0(as.character(icon("caret-down", lib = "font-awesome", style = "color: #00BD0C; font-size: 20px; padding:0px; margin:0px;" )), abs(diff_mean))),
                                 false = "-"
             ),
             diff_median = median_time - lag(median_time, 1),
             diff_median = if_else(str_detect(station, "[2-8]"),
                                   true =  
                                     case_when(
                                       diff_median > 0 ~ paste0(as.character(icon("caret-up", lib = "font-awesome", style = "color: red; font-size: 20px; padding:0px; margin:0px;" )), abs(diff_median)),
                                       TRUE ~ paste0(as.character(icon("caret-down", lib = "font-awesome", style = "color: #00BD0C; font-size: 20px; padding:0px; margin:0px;" )), abs(diff_median))),
                                   false = "-"
             )) %>% 
      mutate(across(c(2:5), ~seconds_to_period(.x)),
             across(c(2:5), ~str_c(
               formatC(minute(.), digits = 1, format = 'd', flag = "0#"),
               formatC(second(.), digits = 1, format = 'd', flag = "0#"),
               sep = ":"))) %>% 
      relocate(station, faster, slower, mean_time, diff_mean, median_time, diff_median) %>% 
      arrange(factor(station, levels = 
                       c("Run Total", "running 1", "running 2", "running 3", "running 4", 
                         "running 5","running 6", "running 7", "running 8", 
                         "Stations", "Ski Erg", "Sled Push", "Sled Pull", "Burpees",
                         "Row", "Farmers Carry", "Lunges", "Wall Balls"))) %>% 
      mutate(
        diff_mean = case_when(
          station == "Run Total" ~ "",
          TRUE ~ diff_mean),
        
        diff_median = case_when(
          station == "Run Total" ~ "",
          TRUE ~ diff_median)
      )
    
    
    my_stats[nrow(my_stats) + 1, ] <- list("-","", "", "", "", "", "")  
    
    
    
    
    sketch = htmltools::withTags(table(
      class = 'display',
      thead(
        tr(
          th(rowspan = 2, 'Stations'),
          th(rowspan = 2, 'Faster'),
          th(rowspan = 2, 'Slower'),
          th(colspan = 2, 'Mean'),
          th(colspan = 2, 'Median')
        ),
         tr(
           th("Time"),
           th("Diff"),
           th("Time"),
           th("Time")
          )
        )))
    
    
    
    
    
    datatable(my_stats,
              escape = FALSE,
              rownames = FALSE,
              selection = "none",
              container = sketch,
              
              options = list(
                lengthChange = FALSE,
                lengthMenu = list(c(9,9)),
                pageLength = 9,
                autoWidth = FALSE,
                searching = FALSE,
                ordering = FALSE,
                paging = TRUE,
                info = FALSE
              ),
              colnames = c("Station",
                           "Faster",
                           "Slower",
                           as.character(icon("clock", lib = "font-awesome")),
                           as.character(icon("chart-line", lib = "font-awesome")),
                           as.character(icon("clock", lib = "font-awesome")),
                           as.character(icon("chart-line", lib = "font-awesome")))
    ) %>% 
      formatStyle(
        columns = c(2:7),
        target = "row",
        backgroundColor = "#262626",
        color = "white",
      ) %>%
      formatStyle(
        columns = "station", 
        valueColumns = "station",
        target = "row",
        color = styleEqual(c("Run Total"), c("#FFFFFE")),
        backgroundColor = styleEqual(c("Run Total"), c("#606060")),
        fontWeight = styleEqual(c("Run Total"), c("bold")),
        fontSize   = styleEqual(c("Run Total"), c("22px"))
        # backgroundColor = styleRow(1, "#606060")
      ) %>% 
      formatStyle(
        'station',
        backgroundColor = styleEqual(
          c("running 1", "running 2", "running 3", "running 4", 
            "running 5","running 6", "running 7", "running 8", 
            "Ski Erg", "Sled Push", "Sled Pull", "Burpees",
            "Row", "Farmers Carry", "Lunges", "Wall Balls", "-"),
          c("#323232"))
      ) %>% 
      formatStyle(
        columns = c(1:7),
        paddingBottom = "2px",
        paddingTop = "2px",
        fontSize   = "16px",
        textAlign = "center",
        verticalAlign = "middle",
      )
    
  })
  
  
  
  
  
  
  # Demographic -------------------------------------------------------------
  ## Visual ----------------------------------------------
  
  output$plot_demographic_continents <- renderPlot(
    
    demographic_continent %>%
      ggplot() +
      aes(x = reorder(continent, -count),
          y = count,
          fill = count == max(count)) +
      geom_col() +
      scale_fill_manual(values = c("grey30", "#FFED00")) +
      geom_text(aes(
        label = str_c(count, if_else(count == 1, " athlete", " athletes"),"\n", percent)),
        vjust = -0.3, size = 3.5, color = "#FFFFFE") +
      labs(x = NULL, y = NULL) +
      ylim(0, max(demographic_continent$count) + 0.4) + 
      plot_dempgraphic_theme()
  )
  
  
  output$plot_demographic_countries <- renderPlot(
    
    demographic_country %>%
      ggplot() +
      aes(x = reorder(country, -count),
          y = count,
          fill = count == max(count)) +
      geom_col() +
      scale_fill_manual(values = c("grey30", "#FFED00")) +
      geom_text(aes(
        label = str_c(count, if_else(count == 1, " athlete", " athletes"),"\n", percent)),
        vjust = -0.3, size = 3.5, color = "#FFFFFE") +
      labs(x = NULL, y = NULL) +
      ylim(0, max(demographic_country$count) + 0.4) +
      plot_dempgraphic_theme()
  )
  
  
  output$plot_demographic_age_groups <- renderPlot(
    
    demographic_age_group %>%
      ggplot() +
      aes(x = reorder(age_group, -count),
          y = count,
          fill = count == max(count)) +
      geom_col() +
      scale_fill_manual(values = c("grey30", "#FFED00")) +
      geom_text(aes(
        label = str_c(count, if_else(count == 1, " athlete", " athletes"),"\n", percent)),
        vjust = -0.3, size = 3.5, color = "#FFFFFE") +
      labs(x = NULL, y = NULL) +
      ylim(0, max(demographic_age_group$count) + 0.4) +
      plot_dempgraphic_theme()
  )
  
  
  
  ## Data --------------------------------------------------------
  
  
  
  output$data_continents <- DT::renderDataTable({
    
    hyrox_ellite_men %>% 
      select(rank, name, continent) %>% 
      mutate(rank = rank_function(rank)) %>% 
      datatable(
        options = list(
          autoWidth = FALSE,    #smart width handling
          searching = FALSE,    #search box above table
          ordering = FALSE,      #whether columns can be sorted
          lengthChange = FALSE, #ability to change number rows shown on page in table
          lengthMenu = FALSE,   #options lengthChange can be changed to
          pageLength = 8,   #initial number of rows per page of table
          paging = TRUE,       #whether to do pagination
          info = FALSE          #notes whether or not table is filtered
        ),
        rownames = FALSE,
        selection = "none",
        escape = FALSE,
        colnames = c(paste(as.character(icon("medal", lib = "font-awesome", style = "color: black; font-size: 20px")), " Race Rank"),
                     paste(as.character(icon("running", lib = "font-awesome", style = "color: black; font-size: 20px")), " Athlete"),
                     paste(as.character(icon("globe", lib = "font-awesome", style = "color: black; font-size: 20px")), " Continent"))
      ) %>% 
      formatStyle(
        columns = c(1,3),
        textAlign = "center"
      )
    
    
    
    
    
    
  })
  
  output$data_countries <- DT::renderDataTable({
    
    hyrox_ellite_men %>% 
      select(rank, name, country) %>% 
      mutate(rank = rank_function(rank)) %>% 
      datatable(
        options = list(
          autoWidth = FALSE,    #smart width handling
          searching = FALSE,    #search box above table
          ordering = FALSE,      #whether columns can be sorted
          lengthChange = FALSE, #ability to change number rows shown on page in table
          lengthMenu = FALSE,   #options lengthChange can be changed to
          pageLength = 8,   #initial number of rows per page of table
          paging = TRUE,       #whether to do pagination
          info = FALSE          #notes whether or not table is filtered
        ),
        rownames = FALSE,
        selection = "none",
        escape = FALSE,
        colnames = c(paste(as.character(icon("medal", lib = "font-awesome", style = "color: black; font-size: 20px")), " Race Rank"),
                     paste(as.character(icon("running", lib = "font-awesome", style = "color: black; font-size: 20px")), " Athlete"),
                     paste(as.character(icon("map", lib = "font-awesome", style = "color: black; font-size: 20px")), " Country"))
      ) %>% 
      formatStyle(
        columns = c(1,3),
        textAlign = "center"
      )
    
    
  })
  
  output$data_age_group <- DT::renderDataTable({
    
    hyrox_ellite_men %>% 
      select(rank, name, age_group) %>% 
      arrange(age_group) %>% 
      mutate(rank = rank_function(rank)) %>% 
      datatable(
        options = list(
          autoWidth = FALSE,    #smart width handling
          searching = FALSE,    #search box above table
          ordering = FALSE,     #whether columns can be sorted
          lengthChange = FALSE, #ability to change number rows shown on page in table
          lengthMenu = FALSE,   #options lengthChange can be changed to
          pageLength = 8,       #initial number of rows per page of table
          paging = TRUE,        #whether to do pagination
          info = FALSE          #notes whether or not table is filtered
        ),
        rownames = FALSE,
        selection = "none",
        escape = FALSE,
        colnames = c(paste(as.character(icon("medal", lib = "font-awesome", style = "color: black; font-size: 20px")), " Race Rank"),
                     paste(as.character(icon("running", lib = "font-awesome", style = "color: black; font-size: 20px")), " Athlete"),
                     paste(as.character(icon("group", lib = "font-awesome", style = "color: black; font-size: 20px")), " Age Group"))
      ) %>% 
      formatStyle(
        columns = c(1,3),
        textAlign = "center"
      )
    
  })
  
  
  
  # Analysis -----------------------------------------------------------------
  ## Athlete name ------------------------------------------------------------
  
  output$athlete_name <- renderText({ 
    sprintf("%s's Race Performance", input$select_athlete_list) 
  })
  
  
  
  
  
  ## Infoboxes ---------------------------------------------------------------
  
  output$athlete_overall_performance <- renderInfoBox({
    
    overall_performance <- hyrox_ellite_men %>% 
      filter(name == input$select_athlete_list) %>% 
      mutate(rank = rank_function(rank)) %>% 
      select(rank, total_race)
    
    infoBox(title = "Overall Performance",
            value = str_c(overall_performance$rank, "  in  ", overall_performance$total_race),
            icon = icon("hourglass-end", lib = "font-awesome"),
            color = "black",fill = TRUE
    )
  })
  
  output$athlete_age_group_info <- renderInfoBox({
    infoBox(title = "Age Group (AG)",
            value = str_c(
              hyrox_ellite_men$age_group[hyrox_ellite_men$name == input$select_athlete_list],
              " | ",
              hyrox_ellite_men$rank_ag[hyrox_ellite_men$name == input$select_athlete_list],
              " AG athletes"
            ),
            icon = icon("group", lib = "font-awesome"),
            color = "black",fill = TRUE
    )
  })
  
  output$nationality <- renderInfoBox({
    infoBox(title = "Nationality",
            value = hyrox_ellite_men$country[hyrox_ellite_men$name == input$select_athlete_list],
            icon = icon("map-marker", lib = "glyphicon"),
            color = "black",fill = TRUE
    )
  })
  
  
  ## Plot & Data -------------------------------------------------------------
  
  ## Station Selected ---------------------------------------------------------
  station_selected <- reactive({
    as.character(input$select_station_list)  
  })
  
  
  scale_run <- reactive({
    faster_running <- min(hyrox_ellite_men_tidy$time_as_duration[str_detect(hyrox_ellite_men_tidy$station, "running") & hyrox_ellite_men_tidy$name == input$select_athlete_list])
    slower_running <- max(hyrox_ellite_men_tidy$time_as_duration[str_detect(hyrox_ellite_men_tidy$station, "running") & hyrox_ellite_men_tidy$name == input$select_athlete_list])
    
    
    # values <- c(faster_running, slower_running)
    # 
    # return(values)
    
    scale_running <- station_statistics %>%
      filter(str_detect(station, "running")) %>%
      summarise(faster_mean   = min(mean_time),
                slower_mean   = max(mean_time),
                faster_median = min(median_time),
                slower_median = max(median_time),
                faster_run    = faster_running,
                slower_run    = slower_running)
    
    return(scale_running)
    
  })
  
  
  ## Switch's ----------------------------------------------------------------
  
  run_mean_line <- reactive(
    if (input$switch_mean){
      geom_line(
        aes(x = station, y = mean_time),
        group = 1, size = 1.5, color = "#00A65A", linetype = "dashed")
    }
  )
  
  mean_values <- reactive(
    if (input$switch_mean ){
      
      if(input$select_station_list == "Running"){
        value <- station_statistics$mean_time[station_statistics$station == "Run Total"]
      } else {
        value <- station_statistics$mean_time[station_statistics$station == input$select_station_list]
      }
      
      value_mean <- str_c(
        formatC(minute(seconds_to_period(value)), digits = 1, format = 'd', flag = "0#"),
        ":",
        formatC(second(seconds_to_period(value)), digits = 1, format = 'd', flag = "0#"),
        " (min:sec)")
    }
  )
  
  
  median_values <- reactive(
    if (input$switch_median){
      
      if(input$select_station_list == "Running"){
        value <- station_statistics$median_time[station_statistics$station == "Run Total"]
      } else {
        value <- station_statistics$median_time[station_statistics$station == input$select_station_list]
      }
      
      
      value_median <- str_c(
        formatC(minute(seconds_to_period(value)), digits = 1, format = 'd', flag = "0#"),
        ":",
        formatC(second(seconds_to_period(value)), digits = 1, format = 'd', flag = "0#"),
        " (min:sec)")
    })
  
  
  
  
  run_median_values <- reactive(
    if (input$switch_median){
      
      geom_label(aes(x = station, y = 0, 
                     label = str_c(
                       formatC(minute(seconds_to_period(mean_time)), digits = 1, format = 'd', flag = "0#"),
                       formatC(second(seconds_to_period(mean_time)), digits = 1, format = 'd', flag = "0#"),
                       sep = ":"
                     )), fill = "#DD4B39", color = "#FFFFFE", size = 5, vjust = 0.0, hjust = 0.0)
    }
  )
  
  run_median_line <- reactive(
    if (input$switch_median){
      geom_line(
        aes(x = station, y = median_time), 
        group = 1, size = 1.5, color = "#DD4B39", linetype = "dashed")
    }
  )
  
  mean_line <- reactive(
    if (input$switch_mean){
      geom_hline(
        yintercept = station_statistics$mean_time[station_statistics$station == station_selected()],
        linetype = "longdash", 
        size = 2, 
        color = "#00A65A"
      ) 
    }
  )
  
  median_line <- reactive(
    if (input$switch_median){
      geom_hline(
        yintercept = station_statistics$median_time[station_statistics$station == station_selected()],
        linetype = "longdash", 
        size = 2, 
        color = "#DD4B39"
      )
    }
  )
  
  
  output$station_mean_value <- renderText({ 
    mean_values()
  })
  
  
  output$station_median_value <- renderText({ 
    median_values()
  })
  
  
  ## Plot Station -------------------------------------------------------------
  plot_station <- reactive({
    if(input$select_station_list == "Running"){
      plot <- hyrox_ellite_men_tidy %>%
        filter(name == input$select_athlete_list,
               str_detect(station, "running")) %>%
        ggplot() +
        geom_line(aes(x = station, y = time_as_duration), group = 1, size = 2.5, color = "#FFED00") +
        geom_point(aes(x = station, y = time_as_duration, 
                       fill = if_else(
                         condition =  rank_station == 1,
                         true = "seagreen",
                         false = "#FFED00")),
                   color = "#262626", size = 15, shape = 21) +
        geom_text(aes(x = station, y = time_as_duration,
                      label = time),
                  size = 7, vjust = -2.0, hjust = 0.6, 
                  color = "#FFFFFE") +
        geom_text(aes(x = station, y = time_as_duration, label = rank_function(rank_station),
                      size = 10,
                      color = if_else(
                        condition =  rank_station == 1,
                        true = "#FFFFFE",
                        false = "black"
                      ))) +
        scale_color_identity() +
        scale_fill_identity() + 
        labs(x = NULL, y = NULL, title = NULL, subtitle = NULL) +
        scale_y_time(labels = label_time(format = '%M:%S'),
                     breaks = seq(min(scale_run()), max(scale_run())),
                     limits = c(min(scale_run()),  max(scale_run() + 7))) +
        theme_minimal() +
        theme(
          plot.background = element_rect(fill = "#262626", color = "#262626"),
          # axis.text = element_text(color = "#FFFFFE", size = 15),
          axis.text.y = element_blank(),
          axis.text.x = element_text(color = "#FFFFFE", size = 15),
          plot.title = element_text(color = "#FFFFFE",face = "bold", vjust = -1, hjust = -0.06, size = 18),
          plot.subtitle = element_text(color = "grey80", vjust = -1),
          panel.grid.major.x = element_line(size = 0.1, color = "grey40", linetype = "longdash"),
          panel.grid.major.y = element_blank(),
          panel.grid.minor = element_blank(),
          axis.ticks.x = element_line(size = 1, color = "#FFED00"),
          axis.ticks.length.x = unit(0.2, "cm"),
          legend.position = "none",
          axis.title.y = element_text(vjust = 3, color = "#FFFFFE")
        ) +
        run_mean_line() +
        run_median_line()
      
    }else if (input$select_station_list != "Running"){
      plot <- hyrox_ellite_men_tidy %>% 
        filter(station == station_selected()) %>% 
        mutate(diff = if_else(diff == "-", str_c(time, " (min:sec)"), diff)) %>% 
        ggplot() +
        aes(
            # x = reorder(name, -time_as_duration),
            x = reorder(name, -rank_station),
            y = time_as_duration,
            fill = name == input$select_athlete_list,
        ) +
        geom_col() +
        coord_flip() +
        scale_y_time(
          labels = label_time(format = '%M:%S'),
          breaks = 
            seq(0,as.numeric(station_statistics$slower[station_statistics$station == station_selected()]), 60),
          limits = 
            c(0,as.numeric(station_statistics$slower[station_statistics$station == station_selected()]) + 20)
        ) +
        labs(x = NULL, y = "[min:sec]") +
        scale_fill_manual(values = c("grey30","#FFED00")) +
        theme_minimal()+
        theme(
          axis.ticks.x        = element_line(size = 0.6, color = "#FFED00"),
          axis.ticks.length.x = unit(0.15, "cm"),
          axis.text.x         = element_text(color = "#FFFFFE", angle = 0, size = 14),  
          axis.text.y         = element_text(color = "#FFFFFE", size = 14),
          panel.grid          = element_blank(),
          axis.title.x        = element_text(size = 16, color = "#FFFFFE", vjust = -0.8),
          # plot.title          = element_text(color = "#FFED00", face = "bold", vjust = 3, size = "50px"),
          # plot.subtitle       = element_text(color = "grey40", vjust = 3),
          legend.position     = "none",
          plot.background     = element_rect(fill = "#262626", colour = "#262626")
        ) +
        geom_text(aes(label = diff,
                      vjust = 0.5, 
                      hjust = -0.1,
                      size = 3,
                      color = case_when(
                        name == input$select_athlete_list ~ "#FFED00",
                        TRUE ~ "#FFFFFE"))
        ) +
        scale_color_identity() +
        mean_line() +
        median_line()
    }
    return(plot)
  })
  
  
  output$plot_run_analysis <- renderPlot(
    plot_station()
  )
  
  
  
  ## table -------------------------------------------------------------------
  
  output$tb_athelte_stations <- DT::renderDataTable({
    
    athlete_table_analysis <- hyrox_ellite_men_tidy %>%
      filter(name == input$select_athlete_list,
             !str_detect(station, "[1-8]")) %>%
      select(station, rank_station, time, diff) %>%
      mutate(rank_station = rank_function(rank_station)) %>% 
      mutate(pace_avg = case_when(
        station == "Run Total" ~ hyrox_ellite_men$pace_run[hyrox_ellite_men$name == input$select_athlete_list],
        station == "Ski Erg"   ~ hyrox_ellite_men$ski_avg_500m[hyrox_ellite_men$name == input$select_athlete_list],
        station == "Row"       ~ hyrox_ellite_men$row_avg_500m[hyrox_ellite_men$name == input$select_athlete_list],
        TRUE ~ "-")) %>% 
      relocate(station, rank_station, time, pace_avg, diff) %>% 
      arrange(factor(station, levels =  c("Run Total", stations_list[9:16])))
    
    
    # athlete_table_analysis[nrow(athlete_table_analysis) + 1, ] <- list("Run",
    #                                                                    global_rank_run,
    #                                                                    global_time_run,
    #                                                                    "-")
    
    
    datatable(
      data =  athlete_table_analysis,
      # extensions = 'Buttons',
      options = list(
        
        # dom = 'Bfrtip',
        # buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
        
        autoWidth = FALSE,     #smart width handling
        searching = FALSE,    #search box above table
        ordering = FALSE,     #whether columns can be sorted
        lengthChange = FALSE, #ability to change number rows shown on page in table
        lengthMenu = FALSE,   #options lengthChange can be changed to
        pageLength = FALSE,   #initial number of rows per page of table
        paging = FALSE,       #whether to do pagination
        info = FALSE          #notes whether or not table is filtered
      ),
      rownames = FALSE,
      selection = "none",
      escape = FALSE,
      colnames = c("",
                   as.character(span(icon("medal", lib = "font-awesome", style = "color: white; font-size: 25px"), 
                                     br(), h5("Rank", style = "margin:0px; padding:0px; color: grey"))),
                   as.character(span(icon("clock", lib = "font-awesome", style = "color: white; font-size: 25px"), 
                                     br(), h5("Time", style = "margin:0px; padding:0px; color: grey"))),
                   as.character(span(icon("heartbeat", lib = "font-awesome", style = "color: white; font-size: 25px"), 
                                     br(), h5("Pace", style = "margin:0px; padding:0px; color: grey"))),
                   as.character(span(icon("stopwatch", lib = "font-awesome", style = "color: white; font-size: 25px"), 
                                     br(), h5("(1) Diff", style = "margin:0px; padding:0px; color: grey")))
      ),
      caption = tags$caption(
        style = "caption-side: bottom; margin-left: 10px; text-align: left; font-size: 14px; color: firebrick", #color: #A8A8A8
        "(1) Diff: Difference for the faster athlete in that station."),
    ) %>% 
      formatStyle(
        columns = c(1:4),
        backgroundColor = '#181818',
        
        
        color = "#FFFFFE",
        fontSize = "16px",
        
        borderTopColor = "white",
        borderTopStyle = "solid",
        borderTopWidth = "1px",
        
        borderBottomColor = "white",
        borderBottomStyle = "solid",
        borderBottomWidth = "1px",
        
        paddingBottom = "10px",
        paddingTop = "10px",
        paddingLeft = "0px",
        textAlign = "center",
        verticalAlign = "middle",
      ) %>% 
      formatStyle(
        columns = c(1),
        textAlign = "left",
        fontWeight = "bold",
        color = "#FFFFFE",
        paddingLeft = "15px",
        borderLeftColor = "white",
        borderLeftStyle = "solid",
        borderLeftWidth = "1px",
      ) %>%
      formatStyle(
        columns = c(5),
        color = "#FFFFFE",
        fontSize = "16px",
        textAlign = "center",
        border = "1px solid white",
        backgroundColor = "firebrick",
        background = styleEqual(c("-", "+"), c("#181818", "firebrick"))
      )
    
  })
  
  
  
  
}

# Run the application 
shinyApp(ui = ui, server = server)
